#!/bin/bash

# takes a structure file (i.e. pdb, xyz, coord, mol2) and sets up a turbomole run with the input files of the same
# name and .mtm extension. If that mtm file doesn't exist, it will create a default example file for user to
# adjust before running again
# $1 is input file
# $2 is a flag to run right away. for when you're confident it will set up properly

node_type=8
scfconvergence=7
DFTD3dispersion=y

filename=`echo $1 | awk -F"." '{print $1}'`
filetype=`echo $1 | awk -F"." '{print $NF}'`

if [[ $filename == coord ]]; then
 filename=`pwd | awk -F"/" '{print $NF}' | awk -F"_" '{print $1}'`
fi

if [ -a $filename.mtm ]; then
 chmod +x $filename.mtm
 if [ -a rawoptions.sh ]; then rm rawoptions.sh; fi
 cat $filename.mtm \
 | sed -e $'s/#/\\n#/g' \
 | egrep -v "\:|^\#" \
 | tr -d '\t' \
 | sed "s/= /=\\n/g" \
 | sed -e '/=/ s/ //g' \
 | tr '\n' '#' \
 | sed 's/=#/=/g' \
 | tr '#' '\n' \
 | egrep -v -e '^$' \
 | sed 's/(/\\(/g' \
 | sed 's/)/\\)/g' \
 | sed 's/ /\\ /g' > rawoptions.sh
 chmod +x rawoptions.sh
 source rawoptions.sh
else
 cp ~mnechay/mikescripts/default.mtm ./$filename.mtm
 echo "please see the default input $filename.mtm, adjust to your liking and submit again"
 exit 0
fi

# Minnesota functionals are not recognized by the define script. We'll need to sed them in later
if [ "$functional" == "m06" ]; then functional=tpss; mnFunctional=m06
elif [ "$functional" == "m06-2x" ]; then functional=tpss; mnFunctional=m06-2x
else mnFunctional=n; fi

if [ -d $filename\_$type ]; then rm -r $filename\_$type; fi
mkdir $filename\_$type

if [ $1 == coord ]; then
 cp coord $filename\_$type/
elif [ $filetype == xyz ]; then
 x2t $1 > $filename\_$type/coord
elif [ $filetype == pdb ]; then
 babel -ipdb $1 -oxyz $filename.xyz
 x2t $filename.xyz > $filename\_$type/coord
 rm $filename.xyz
elif [ $filetype == mol2 ]; then
 babel -imol2 $1 -oxyz $filename.xyz
 x2t $filename.xyz > $filename\_$type/coord
 rm $filename.xyz
fi

# lets deal with some missing variables here

if [ -z "$ricore" ]; then
 ricore=500
fi

# get rid of frozen coordinates 
cd $filename\_$type
freezeatoms $freeze
cd ..
# This section will freeze atoms if it says so in mtm file
# End freezing section

if [ -z $multiplicity ]; then
 mult=s
elif [[ $multiplicity == 1 ]]; then
 mult=s
elif [[ $multiplicity == 3 ]]; then
 mult=t
elif [[ $multiplicity == 5 ]]; then
 mult='u\ 4'
elif [[ $multiplicity == 7 ]]; then
 mult='u\ 6'
elif [[ $multiplicity == 9 ]]; then
 mult='u\ 8'
elif [[ $multiplicity == 11 ]]; then
 mult='u\ 10'
fi

if [[ $multiplicity == 2 ]]; then
 mult='u\ 1'
elif [[ $multiplicity == 4 ]]; then
 mult='u\ 3'
elif [[ $multiplicity == 6 ]]; then
 mult='u\ 5'
fi 

cd $filename\_$type

if [ -a qdefine.sh ]; then rm qdefine.sh; fi

echo "echo -e \"\n\na coord\n*\nno\nb all BASISSET\n\n" > qdefine.sh
sed -i "s/BASISSET/$basisset/g" qdefine.sh

number=`egrep " k| ca| sc| ti| v| cr| mn| fe| co| ni| cu| zn| rb| sr| y| zr| nb| mo| tc| ru| rh| pd| ag| cd| cs| ba| lu| hf| ta| w| re| os| ir| pt| au| hg" coord | awk -F" " '{print $4}' | wc -l`

# below contains a while loop that goes through each metal and assigns the basis set desired
x=1 #initialize counter
while [ $x -le $number ]; do
 metal=`egrep " k| ca| sc| ti| v| cr| mn| fe| co| ni| cu| zn| rb| sr| y| zr| nb| mo| tc| ru| rh| pd| ag| cd| cs| ba| lu| hf| ta| w| re| os| ir| pt| au| hg" coord | awk -F" " '{print $4}' | head -n +$x | tail -1`
 sed -i '${s/$/b \\"qwerty\\" METALBASISSET\\n/}' qdefine.sh
 sed -i "s/qwerty/$metal/g" qdefine.sh
 sed -i "s/METALBASISSET/$metalbasisset/g" qdefine.sh
 x=$(( $x + 1 ))
done
# concludes metal basis set setup

 sed -i '${s/$/*\\neht\\n\\n\\nCHARGE\\nn\\nMULT\\n*\\n\\nscf\\niter\\n500\\n\\nNBOdft\\nfunc\\nFUNCTIONAL\\non\\nq\\nri\\nm\\nRICORE\\non\\n\\nMARIJq\\nq\\n" | define > defineoutput/}' qdefine.sh
 sed -i "s/CHARGE/$charge/g" qdefine.sh
 sed -i "s/MULT/$mult/g" qdefine.sh
 sed -i "s/FUNCTIONAL/$functional/g" qdefine.sh
 sed -i "s/RICORE/$ricore/g" qdefine.sh

if [[ $nbo == y ]]; then
 sed -i 's/NBO/prop\\npop\\ny\\nnbo\\n*\\n*\\n/g' qdefine.sh
else
 sed -i "s/NBO//g" qdefine.sh
fi

if [[ $marij == y ]]; then
 sed -i 's/MARIJ/marij\\n\\n/g' qdefine.sh
else
 sed -i 's/MARIJ//g' qdefine.sh
fi


if [[ $metalbasisset == *-cc-* ]]; then
# below contains a while loop that goes through each metal and assigns another basis set for ri because this one apparently doesn't exist for the metal
 x=1 #initialize counter
 while [ $x -le $number ]; do
  metal=`egrep " k| ca| sc| ti| v| cr| mn| fe| co| ni| cu| zn| rb| sr| y| zr| nb| mo| tc| ru| rh| pd| ag| cd| cs| ba| lu| hf| ta| w| re| os| ir| pt| au| hg" coord | awk -F" " '{print $4}' | head -n +$x | tail -1`
  sed -i '${s/ri\\n/ri\\njbas\\n\\nb \\"qwerty\\" def2-TZVPP\\n*\\n/}' qdefine.sh
  sed -i "s/qwerty/$metal/g" qdefine.sh
  x=$(( $x + 1 ))
 done
# concludes metal basis set setup
fi


if echo $type | grep -q ts; then
 sed -i 's/dft/stp\\nitvc\\nITVC\\n\\ndft/g' qdefine.sh
 sed -i "s/ITVC/$itvc/g" qdefine.sh
fi

cat qdefine.sh | sed 's/eht\\n\\n\\n/eht\\n\\n/g' >> qdefine.sh


chmod +x qdefine.sh
cp qdefine.sh ../

eval $( cat ../qdefine.sh | head -n +1 )
scf=`grep scfiterlimit control | awk -F" " '{print $NF}'`
if [ $scf != 500 ]; then
 rmall coord
 eval $( cat ../qdefine.sh | tail -1 ) 
 scf=`grep scfiterlimit control | awk -F" " '{print $NF}'`
if [ $scf != 500 ] ; then
 echo "the define script is not working. Sorry, please check it out."
 exit 0
fi  
fi

mv ../qdefine.sh ./

if [[ $cosmo == y ]]; then
 echo "echo -e \"$dielectricconstant\n\n\n\n\n\n\n\n\n\n\nr all b\n" > qcosmo.sh

 number=`egrep " k| ca| sc| ti| v| cr| mn| fe| co| ni| cu| zn| rb| sr| y| zr| nb| mo| tc| ru| rh| pd| ag| cd| cs| ba| lu| hf| ta| w| re| os| ir| pt| au| hg" coord | awk -F" " '{print $4}' | wc -l`
 metal=`egrep " k| ca| sc| ti| v| cr| mn| fe| co| ni| cu| zn| rb| sr| y| zr| nb| mo| tc| ru| rh| pd| ag| cd| cs| ba| lu| hf| ta| w| re| os| ir| pt| au| hg" coord | awk -F" " '{print $4}'`
 x=1
 while [ $x -le $number ]; do
  metal=`egrep " k| ca| sc| ti| v| cr| mn| fe| co| ni| cu| zn| rb| sr| y| zr| nb| mo| tc| ru| rh| pd| ag| cd| cs| ba| lu| hf| ta| w| re| os| ir| pt| au| hg" coord | awk -F" " '{print $4}' | head -n +$x | tail -1`

  if [[ $metal == zn ]]; then
   sed -i '${s/$/r \\"qwerty\\" 1.626\\n/}' qcosmo.sh
   sed -i s/qwerty/$metal/g qcosmo.sh
  else
   sed -i '${s/$/r \\"qwerty\\" 2.200\\n/}' qcosmo.sh
   sed -i s/qwerty/$metal/g qcosmo.sh
  fi
  x=$(( $x + 1 ))
 done

 sed -i '${s/$/\*\\n\\n" | cosmoprep > cosmooutput/}' qcosmo.sh

 chmod +x qcosmo.sh
 ./qcosmo.sh

fi

if [[ $DFTD3dispersion == y ]]; then sed -i '/\$dft/i \\$disp3' control; fi
sed -i 's/\$scforbitalshift  closedshell.*/\$scforbitalshift automatic 0.1/g' control
sed -i '/\$scfconv/d' control
sed -i '/\$scfdamp/d' control
sed -i '/\$scfiterlimit/a \\$scfdamp   start=4.700  step=0.050  min=0.100' control
sed -i '/\$scfiterlimit/a \\$scfconv   SCFCONVERGENCE' control
sed -i "s/SCFCONVERGENCE/$scfconvergence/g" control

if [ -a script.sh ]; then rm script.sh; fi

if [[ $type == ts ]]; then
 if [ -a ../hessian ]; then
  echo "hessian file detected. I'll take that."
  cp ../hessian ./
  sed -i 's/$end/$hessian file=hessian\n&/g' control
 else
  echo "No hessian file detected. Beware that aoforce will be invoked automatically before ts optimization"
 fi
 echo "ridft >> ridft.out" > script.sh
 echo "jobex -c 500 -ri -energy 7 -gcart 4 -statpt -trans" >> script.sh
 chmod +x script.sh

elif [[ $type == opt ]]; then
 echo "ridft >> ridft.out" > script.sh
 echo "jobex -c 500 -ri -energy 5 -gcart 2 -gexp 2" >> script.sh
 chmod +x script.sh

elif [[ $type == sp ]]; then
 echo "ridft >> ridft.out " > script.sh
 chmod +x script.sh

elif [[ $type == force ]]; then
 echo "ridft >> ridft.out" > script.sh
 echo "aoforce >> force.out" >> script.sh
 chmod +x script.sh

elif [[ $type == optforce ]]; then
 echo "ridft >> ridft.out" > script.sh
 echo "jobex -c 500 -ri -energy 5 -gcart 2 -gexp 2" >> script.sh
 echo "aoforce >> force.out" >> script.sh
 chmod +x script.sh

elif [[ $type == optNumForce ]]; then
 echo "ridft >> ridft.out" > script.sh
 echo "jobex -c 500 -ri -energy 5 -gcart 2 -gexp 2" >> script.sh
 echo "genMFILE" >> script.sh
 echo "freezeatoms $freeze2" >> script.sh
 echo "NumForce -ri -level $functional -central -frznuclei -mfile MFILE > numforce.out" >> script.sh
 chmod +x script.sh

elif [[ $type == NumForce ]]; then
 echo "ridft >> ridft.out" > script.sh
 echo "rdgrad >> rdgrad.out" >> script.sh
 echo "genMFILE" >> script.sh
 echo "NumForce -ri -level $functional -central -frznuclei -mfile MFILE > numforce.out" >> script.sh
 chmod +x script.sh

elif [[ $type == tsNumForce ]]; then
 if [ -a ../hessian ]; then
  echo "hessian file detected. I'll take that."
  cp ../hessian ./
  sed -i 's/$end/$hessian file=hessian\n&/g' control
 else
  echo "No hessian file detected. Beware that aoforce will be invoked automatically before ts optimization"
 fi
 echo "ridft >> ridft.out" > script.sh
 echo "jobex -c 500 -ri -energy 5 -gcart 2 -statpt -trans" >> script.sh
 echo "genMFILE" >> script.sh
 echo "NumForce -ri -level $functional -central -frznuclei -mfile MFILE > numforce.out" >> script.sh
 chmod +x script.sh


elif [[ $type == NumForcetsNumForce ]]; then
 echo "ridft >> ridft.out" > script.sh
 echo "rdgrad >> rdgrad.out" >> script.sh
 echo "genMFILE" >> script.sh
 echo "NumForce -ri -level $functional -central -frznuclei -mfile MFILE > numforce.out" >> script.sh
 echo "jobex -c 500 -ri -energy 5 -gcart 2 -statpt -trans" >> script.sh
 echo "NumForce -ri -level $functional -central -frznuclei -mfile MFILE > numforce.out" >> script.sh
 chmod +x script.sh

elif [[ $type == optNumForcetsNumForce ]]; then
 echo "ridft >> ridft.out" > script.sh
 echo "sed -i 's/itrvec      1/itrvec      0/g' control" >> script.sh
 echo "jobex -c 500 -ri -energy 5 -gcart 2 -gexp 2" >> script.sh
 echo "genMFILE" >> script.sh
 echo "freezeatoms $freeze2" >> script.sh
 echo "NumForce -ri -level $functional -central -frznuclei -mfile MFILE > numforce.out" >> script.sh
 echo "sed -i 's/itrvec      0/itrvec      1/g' control" >> script.sh
 echo "cp job.last old_job.last" >> script.sh
 echo "cp gradient old_gradient" >> script.sh
 echo "jobex -c 500 -ri -energy 5 -gcart 2 -statpt -trans" >> script.sh
 echo "NumForce -ri -level $functional -central -frznuclei -mfile MFILE > numforce.out" >> script.sh
 chmod +x script.sh

fi


if [[ $loosenconvergencecriteria == y ]]; then
 currentcriteria=`grep jobex script.sh | awk -F" " '{print $6}'`
 newcriteria=$(($currentcriteria-2))
 sed -i "s/-energy $currentcriteria/-energy $newcriteria/g" script.sh
 currentcriteria=`grep jobex script.sh | awk -F" " '{print $8}'`
 newcriteria=$(($currentcriteria-1))
 sed -i "s/-gcart $currentcriteria/-gcart $newcriteria/g" script.sh
fi


# let's modify the control file if desired

if [[ $mnFunctional != n ]]; then
 sed -i "s/functional .*/functional $mnFunctional/g" control
fi

if [[ $troublesomeTSsearch == y ]]; then
 sed -i 's/.*itrvec.*/&\n   radmin     5.0E-06\n   radmax     2.0E-02\n   tradius    2.0E-05/g' control
else
 sed -i 's/.*itrvec.*/&\n   tradius    0.20/g' control
fi

if [[ $weightderivatives == y ]]; then
 sed -i 's/.*dft.*/&\n   weight derivatives/g' control
fi

if [[ $gridsize ]]; then
 sed -i "s/gridsize   m3/gridsize   $gridsize/g" control
fi

if [[ $rpacor ]]; then
 sed -i 's/$end/$rpacor     RPACOR\n&/g' control
 sed -i "s/RPACOR/$rpacor/g" control
fi

if [[ $maxcor ]]; then
 sed -i 's/$end/$maxcor     MAXCOR\n&/g' control
 sed -i "s/MAXCOR/$maxcor/g" control
fi

# I had some large jobs fail with the suggestion: increase ga_memperproc heap by 458734 8-byte words
# The following doubles stack and heap from defaults, so this should cover systems of any size we
# would use
sed -i 's/$end/$paroptions \n ga_memperproc 2621440 78643200\n&/g' control

#end control file manipulation

IFS=',' read -a Nvalues <<< "$slots"


#below is a file for automatic hoffman resubmission

cat <<EOF >> otherscript.sh
#!/bin/bash

# This is the base script I always will send to Hoffman. It sets up the MFILE
# necessary for certain parallelization in some TURBOMOLE scripts and then
# keeps track of where it is in the "script.sh" which contains the actual
# TURBOMOLE commands. Ttimer is a subroutine that activates when time is almost
# out. Once activated, Ttimer will send a STOP command to TURBOMOLE and submit
# the remainingscript.sh to start where it left off. One current limitation:
# all TURBOMOLE commands must be in ONE line, so if there are any if/for/while
# statements... they will have to be in one line. This is all very against
# standard style however not sure of another way to get functionality I want.
    
if [ -f "\$SGE_CWD_PATH/pleaseResubmit" ]; then rm \$SGE_CWD_PATH/pleaseResubmit; fi

genMFILE
Ttimer \$$

scriptLC=\`wc -l < script.sh\`

counter=1
while [ \$counter -le \$scriptLC ]; do
 cat script.sh | tail -\$((\$scriptLC-\$counter+1)) > _remainingscript.sh
 mv _remainingscript.sh remainingscript.sh
 if [ -f runthis.sh ]; then rm runthis.sh; fi
 cat remainingscript.sh | head -n +1 > runthis.sh
 chmod +x runthis.sh
 if [ ! -f "\$SGE_CWD_PATH/pleaseResubmit" ]; then
  runthis.sh
  if [ ! -f "\$SGE_CWD_PATH/pleaseResubmit" ]; then
   counter=\$((\$counter+1))
  else
   break
  fi
 else
  break
 fi
done

if [ \$counter -gt \$scriptLC ]; then
 echo "ran every line of script.sh"
else
 echo "didn't get to every line of script.sh, will resubmit"
 sleep 500h
fi
EOF

if [ "${#Nvalues[@]}" -gt "1" ]; then
 for ii in ${Nvalues[@]}; do
  mkdir $ii\cores
  cp * $ii\cores/ 2>&1 | grep -v 'omitting directory'
  cd $ii\cores
  if [[ $2 ]]; then
   scf=`grep scfiterlimit control | awk -F" " '{print $NF}'`
   if [ $scf == 500 ]; then
    if [ $exclusive == y ]; then
     runturbomole.mine -sub -N $ii -t $time otherscript.sh
    else
     runturbomole.mine -sub -N $ii -t $time otherscript.sh
    fi
   fi
  fi
 cd ..
 done
else
 if [[ $2 ]]; then
  scf=`grep scfiterlimit control | awk -F" " '{print $NF}'`
  if [ $scf == 500 ]; then
   if [[ $exclusive == n ]]; then
    runturbomole.mine -sub -N $Nvalues -t $time -type $node_type otherscript.sh
   else
    runturbomole.mine -sub -N $Nvalues -t $time -type $node_type otherscript.sh
   fi
  fi
 fi
fi

cd ..


