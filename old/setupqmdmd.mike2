#!/bin/bash


#########################
#			#
#      Q M / D M D      #
#     setup by mike	#
#			#
#########################

if [ -z "$1" ]
then
echo '
# This script aims to take a pdb file and set up everything one would need for a QM/DMD run
# First, call the script and the qmdmd folder containing the pdb file of the same name,
# Or just call the script and any pdb file:
# setupqmdmd.mike runthis.pdb
# The script will clean up and format it the way the QM/DMD process likes. it will also convert the file to a DMD-compatible format

# If the above was successful, the script will also state the nearby residues to the active site.
# setupqmdmd.mike foldername HIS422,glu471,HIS426 -1 1 <-- substrate charge
# $1 is qmdmd folder. $2 should be residue list for qm region. HIS271,glu586,TYR464 #3 metal/substrate charge $4 is the metal/substrate multiplicity.
# Example call: setupqmdmd.mike Ir_protein_folder HIS271,glu586,TYR464, -1, 1
# two log files are created: qmdmdsetup.log and qmdmdsetup.err within the directory

# Other scripts required: 
# pdbPOLARHs
# genQMparameters
'
exit 0
fi

qmdmdfolder=`echo $1 | awk -F"." '{print $1}'`
filetype=`echo $1 | awk -F"." '{print $NF}'`

if [[ "$filetype" == pdb ]]
then

if [ -d "$qmdmdfolder" ]
then
echo "qmdmd folder $qmdmdfolder already exists. please change pdb filename or delete/rename existing folder"
exit 0
fi

mkdir $qmdmdfolder
cp $qmdmdfolder.pdb $qmdmdfolder/
echo "new qmdmd folder, $qmdmdfolder, created"

elif [ -n "$filetype" ]
then

if [[ "$filetype" != "$qmdmdfolder" ]]
then

echo "please specify either a pdb file or a valid qmdmd folder"
exit 0

fi
fi

reslist=$2
charge=$3
multiplicity=$4

if [ -z "$2" ]
then

#cleanup, even if we shouldn't need it:
if [ -a $qmdmdfolder/topparam.list ]; then rm $qmdmdfolder/topparam.list; fi
if [ -a $qmdmdfolder/yay2.pdb ]; then rm $qmdmdfolder/yay2.pdb; fi
if [ -a $qmdmdfolder/metals.pdb ]; then rm $qmdmdfolder/metals.pdb; fi
if [ -a $qmdmdfolder/sub.pdb ]; then rm $qmdmdfolder/sub.pdb; fi

# v do we need this config file???
if [ -a $qmdmdfolder/config ]; then rm $qmdmdfolder/config; fi
echo "fullpathname=`pwd`/$qmdmdfolder/" >> $qmdmdfolder/config
echo "dmd_path=/u/home/ana/snedd/bin/DMD" >> $qmdmdfolder/config
if [ -a $qmdmdfolder/config1 ]; then rm $qmdmdfolder/config1; fi
echo "yourfilename=yay2.pdb" > $qmdmdfolder/config1
echo "dmd_path=/u/home/ana/snedd/bin/DMD" >> $qmdmdfolder/config1
# ^ do we need this config file?

###### F O R M A T T I N G   S E C T I O N ######

dos2unix $qmdmdfolder/$qmdmdfolder.pdb >> $qmdmdfolder/qmdmdsetupoutput 2>/dev/null

# All protein atoms should be simply labelled as "ATOM" in the first column
# I've had pdb files include a "B" version of the protein amino acids, this gets rid of that as well
# "yay2.pdb" is a temporary file I use to layer all lines into as they are processed into a pdb file DMD can read properly
grep -e "^ATOM" $qmdmdfolder/$qmdmdfolder.pdb | egrep -v "BALA|BCYS|BASP|BGLU|BPHE|BGLY|BHIS|BILE|BLYS|BLEU|BMET|BASN|BPRO|BGLN|BARG|BSER|BTHR|BVAL|BTRP|BTYR" >> $qmdmdfolder/yay2.pdb
# At this point, only the protein is present in the formatted file.

# TER separates the three different groups: protein, metal(s), and substrate. Let's create the metal section next!
echo "TER" >> $qmdmdfolder/yay2.pdb
egrep -i "HETATM .... IR|HETATM .... ZN|HETATM .... FE|HETATM .... CU|HETATM .... AG|HETATM .... PT|HETATM .... PD|HETATM .... NI" $qmdmdfolder/$qmdmdfolder.pdb > $qmdmdfolder/metals.pdb #there must be an easier way to extract the metals. otherwise, just add to the list if yours isn't here
# Throughout setup, metals such as IR are referenced as IR (PDB code), "Ir" (as in at the end of the line), and "ir" (TURBOMOLE takes atom input in this way)
readarray -t METALS < <(cat $qmdmdfolder/metals.pdb | awk -F" " '{print $3}' | tr [a-z] [A-Z])
readarray -t metals < <(cat $qmdmdfolder/metals.pdb | awk -F" " '{print $3}' | tr [A-Z] [a-z])
Metals=(${metals[@]^})
# Now we should be able to just reference the metal number to be displayed in whatever capitalization we want

# Start counter for while loop through all metals
COUNTER=1
metalcount=`wc -l $qmdmdfolder/metals.pdb | awk -F" " '{print $1}'`
# This while loop will extract and format each metal line for inclusion in the protein pdb file
while [[ "$COUNTER" -le "$metalcount" ]]
do
# this is confusing but should format the pdb line how we want
cat $qmdmdfolder/metals.pdb | head -n +$COUNTER | tail -1 | awk 'length(FNR)==1{print substr($0,1,7), "  "FNR, substr($0,13,length($0))} length(FNR)==2{print substr($0,1,6), "  "FNR, substr($0,13,length($0))}' | head -n +1 | awk 'length($0)>70{$0=substr($0,1,17)"'${METALS[$(($COUNTER-1))]}$COUNTER' B   '$COUNTER'"substr($0,27,length($0))}1' | sed 's/'${METALS[$(($COUNTER-1))]}' *$/Zn/g' | sed 's/'${metals[$(($COUNTER-1))]}' *$/Zn/g' | sed 's/'${Metals[$(($COUNTER-1))]}' *$/Zn/g' >> $qmdmdfolder/yay2.pdb
if [ -a $qmdmdfolder/metal$COUNTER.pdb ]; then rm $qmdmdfolder/metal$COUNTER.pdb; fi
cat $qmdmdfolder/metals.pdb | head -n +$COUNTER | tail -1 | awk 'length(FNR)==1{print substr($0,1,7), "  "FNR, substr($0,13,length($0))} length(FNR)==2{print substr($0,1,6), "  "FNR, substr($0,13,length($0))}' | head -n +1 | awk 'length($0)>70{$0=substr($0,1,17)"'${METALS[$(($COUNTER-1))]}$COUNTER' B   '$COUNTER'"substr($0,27,length($0))}1' | sed 's/'${METALS[$(($COUNTER-1))]}' *$/Zn/g' | sed 's/'${metals[$(($COUNTER-1))]}' *$/Zn/g' | sed 's/'${Metals[$(($COUNTER-1))]}' *$/Zn/g' >> $qmdmdfolder/metal$COUNTER.pdb
babel $qmdmdfolder/metal$COUNTER.pdb $qmdmdfolder/metal$COUNTER.mol2 2>> $qmdmdfolder/qmdmdsetup.err
echo 'MOL     '${METALS[$(($COUNTER-1))]}$COUNTER'     ./metal'$COUNTER'.mol2' >> $qmdmdfolder/topparam.list
echo "TER" >> $qmdmdfolder/yay2.pdb
COUNTER=$(($COUNTER + 1))
done
# metal.pdb files should be setup, and we should now be ready to add our substrate, i.e., all HETATM entries that weren't metals.

# greps just the substrate lines to the sub.pdb file
egrep -v " IR | FE | CU | ZN | AG | PT | PD | NI " $qmdmdfolder/$qmdmdfolder.pdb | egrep "^HETATM" | awk 'length(FNR)==1{print substr($0,1,7), "  "FNR, substr($0,13,length($0))} length(FNR)==2{print substr($0,1,6), "  "FNR, substr($0,13,length($0))}' | awk 'length($0)>70{$0=substr($0,1,17)"SUB B   '$COUNTER'"substr($0,27,length($0))}1' >> $qmdmdfolder/sub.pdb
# if there wasn't actually a substrate, then the next part can be skipped
if [ -s $qmdmdfolder/sub.pdb ]; then
cd $qmdmdfolder
# the following aims to number all atoms in the substrate. this is necessary for proper labelling later on where every atom needs to be unique
# numbers are added simply by appending a line number. first we shift all to start at atom #10 to preserve spacing. for this reason, only 90 atoms can be part of the substrate for it goes to 3 digits and screws up the formatting. this can be expanded if needed by changing the numbering code below
( tac sub.pdb ; printf " \n \n \n \n \n \n \n \n \n" ) | tac | nl | awk 'length($0)>20{$0=substr($0,1,21)""substr($1,1,3)""substr($0,24,length($0))}1' | cut -f 2- | grep "HETATM" > _sub.pdb
mv _sub.pdb sub.pdb
cd ..
cat $qmdmdfolder/sub.pdb >> $qmdmdfolder/yay2.pdb
# substrate section should be g2g

# The following takes some necessary steps to prepare the substrate section for the DMD run
babel -i pdb $qmdmdfolder/sub.pdb -o mol2 $qmdmdfolder/sub.mol2 2>> $qmdmdfolder/qmdmdsetup.err
# H atoms that are not attached to O or N need to be labelled as "Eh"
sed -i 's/ H / Eh/g' $qmdmdfolder/sub.mol2
cd $qmdmdfolder
# the following is a separate script I wrote which outputs exactly the sed commands needed to turn our polar "Eh"'s back to "H"
pdbPOLARHs sub.pdb > IDpolarH.sh 2>>qmdmdsetup.err
chmod +x IDpolarH.sh
./IDpolarH.sh
cd ..
# I guess I could have just done that all in here, but I worked on it and like it as a separate package

echo "TER" >> $qmdmdfolder/yay2.pdb
echo "MOL     SUB     ./sub.mol2" >> $qmdmdfolder/topparam.list
else
if [ -a $qmdmdfolder/sub.pdb ]; then rm $qmdmdfolder/sub.pdb; fi
fi
echo "ENDMDL" >> $qmdmdfolder/yay2.pdb
cp $qmdmdfolder/yay2.pdb $qmdmdfolder/initial.pdb
cp $qmdmdfolder/initial.pdb $qmdmdfolder/initial.orig.pdb
cd $qmdmdfolder
pdb_to_pdbDMD.sh initial.pdb new.pdb >> qmdmdsetup.log
success=`grep "GOOD" $qmdmdfolder/qmdmdsetup.log`
echo $success
echo "run command again with the QM residues and substrate/metal charge labelled"
echo "chimera $qmdmdfolder/new.pdb"
pwd > pwd
echo "scp mnechay@hoffman2.idre.ucla.edu:`cat pwd`/new.pdb ./"
rm pwd
cd ..
else
echo "1 should be your qmdmd folder"
fi
if [ $2 ]
then
cd $qmdmdfolder
if [ -a inConstr ]; then rm inConstr; fi
if [ -a genESC.output ]; then rm genESC.output; fi
genESC.linux  ~snedd/bin/DMD/parameter/ new.pdb topparam.list  >> inConstr 2>genESC.output
if [ -a $qmdmdfolder/input ]; then rm $qmdmdfolder/input; fi
genQMDMDparameters $2
extract_qm.sh new.pdb x.pdb >> step2.output
chimera_addh.sh x.pdb h.pdb >> step2.output
cd ..
if [ -a $qmdmdfolder/Spec1.sh ]; then rm $qmdmdfolder/Spec1.sh; fi
if [ -a $qmdmdfolder/Spec2.sh ]; then rm $qmdmdfolder/Spec2.sh; fi
readarray -t METALS < <(cat $qmdmdfolder/metals.pdb | awk -F" " '{print $3}' | tr [a-z] [A-Z])
readarray -t metals < <(cat $qmdmdfolder/metals.pdb | awk -F" " '{print $3}' | tr [A-Z] [a-z])
Metals=(${metals[@]^})
echo "sed s/Zn/${Metals[0]}/ < \$qmdmdfolder > _tmp" > $qmdmdfolder/Spec1.sh
echo "mv _tmp \$qmdmdfolder" >> $qmdmdfolder/Spec1.sh
echo "sed s/${Metals[0]}/Zn/ < \$qmdmdfolder > _tmp" > $qmdmdfolder/Spec2.sh
echo "mv _tmp \$qmdmdfolder" >> $qmdmdfolder/Spec2.sh
chmod +x $qmdmdfolder/Spec1.sh
chmod +x $qmdmdfolder/Spec2.sh
cd $qmdmdfolder
create_coord.sh h.pdb >> step2.output
cd ..
mkdir $qmdmdfolder/Template_EO
cp $qmdmdfolder/coord $qmdmdfolder/Template_EO/
if [[ $3 == *-* ]]; then
echo "charge is negative"
elif [[ $charge == *+* ]]; then
echo "charge is positive"
else
subcharge=`echo +$3`
fi
echo $subcharge >> $qmdmdfolder/changecharge
forbc=`cat $qmdmdfolder/changecharge | tr -d '\n'`
charge=`echo $forbc | bc`
echo "charge is $charge" >> $qmdmdfolder/charge
cd $qmdmdfolder/Template_EO
if [ -a defineoutput ]; then rm defineoutput; fi
eval $( quickdefine $charge $4 | head -n +1 )
scf=`grep scfiterlimit control | awk -F" " '{print $NF}'`
if [ $scf != 500 ]
then
rmall coord
eval $( quickdefine $charge $4 | tail -1 )
scf=`grep scfiterlimit control | awk -F" " '{print $NF}'`
if [ $scf != 500 ]
then
echo "the define script is not working. Sorry, please check it out."
exit 0
fi
fi
sed -i '/\$dft/i \\$disp3' control
if [ -a run_calc.sh ]; then rm run_calc.sh; fi
echo "ridft >> ridft.out" > run_calc.sh
chmod +x run_calc.sh
cd ..
if [ -d Template_Opt ]; then rm -r Template_Opt/; fi
cp -R Template_EO/ Template_Opt/
cd ./Template_Opt
rm run_calc.sh
echo "jobex -c 500 -ri -energy 5 -gcart 2 -gexp 2" > run_calc.sh
chmod +x run_calc.sh
cd ../..
cd $qmdmdfolder
pdb_to_pdbDMD.sh new.pdb test.pdb
fi
